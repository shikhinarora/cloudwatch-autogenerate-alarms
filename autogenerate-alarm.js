'use strict';

const _          = require('lodash');
const co         = require('co');
const AWS        = require('aws-sdk');
const cloudwatch = new AWS.CloudWatch();

const alarmActions = (process.env.alarm_actions || '').split(',');
const okAction     = (process.env.ok_actions || '').split(',');

let createAlarmsForFunction = co.wrap(function* (functionName) {
  console.log('`Function name is ${functionName}`' + '----');

  let putReq = {
    AlarmName: `Function [${functionName}] : Errors >= 1`, //This is linked to deletion of alarm also. Update function name there as well.
    MetricName: 'Errors',
    Dimensions: [
      { Name: 'FunctionName',  Value: functionName },
    ],
    Namespace: 'AWS/Lambda',
    Threshold: 1,      // 1s
    ComparisonOperator: 'GreaterThanOrEqualToThreshold',      
    Period: 60,           // per min
    EvaluationPeriods: 5, 
    DatapointsToAlarm: 5, // 5 consecutive mins to trigger alarm
    Statistic: 'Sum',
    ActionsEnabled: true,
    AlarmActions: alarmActions,
    AlarmDescription: `auto-generated by Lambda [${process.env.AWS_LAMBDA_FUNCTION_NAME}]`,
    OKActions: okAction,
    Unit: 'Count'
  };
  yield cloudwatch.putMetricAlarm(putReq).promise();

  console.log('auto-created error ALARMS for Lambda function' + '-----' + { functionName });
});

module.exports.handler = co.wrap(function* (event, context, cb) {
  let functionName = event.detail.requestParameters.functionName;

  yield createAlarmsForFunction(functionName);

  cb(null, 'ok');
});